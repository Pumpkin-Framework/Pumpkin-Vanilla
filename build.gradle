buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public'
        }
        maven {
            name = 'minecrell-snapshots'
            url = 'http://repo.minecrell.net/snapshots'
        }
    }

    dependencies {
        classpath 'net.minecrell:VanillaGradle:1.0-SNAPSHOT'
    }
}

//plugins {
//    id "com.github.hierynomus.license" version "0.11.0"
//    id "java"
//    id "checkstyle"
//}

apply plugin: 'net.minecrell.vanilla'
//apply plugin: 'checkstyle'

ext.minecraftPlugin = plugins.getPlugin('net.minecrell.vanilla')

minecraft {
    version = '1.8'
    mappings = 'snapshot_20150513'
    serverTweaker = 'nl.jk_5.pumpkin.launch.ServerTweaker'
}

repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
    maven {
        name = 'sonatype-snapshots'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        name = 'jk-5'
        url = 'http://maven.jk-5.nl'
    }
}

dependencies {
    compile('org.spongepowered:mixin:0.3.4-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }
    compile 'com.typesafe:config:1.2.1'
    compile 'com.flowpowered:flow-math:1.0.0'

    compile 'com.zaxxer:HikariCP-java6:2.1.0'
    compile 'org.postgresql:postgresql:9.4-1201-jdbc41'
    compile 'org.javassist:javassist:3.19.0-GA'
    compile 'com.j256.ormlite:ormlite-jdbc:4.48'

    compile 'jline:jline:2.12.1'
    compile 'de.svenkubiak:jBCrypt:0.4'

    testCompile 'junit:junit:4.12'
}

ext {
    mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
    mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.pumpkin.refmap.json")
}

task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from minecraftPlugin.delayedFile('{SRG_DIR}')

    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs
compileJava.dependsOn copySrgs

jar {
    from project.mixinRefMap
}

reobf.doFirst {
    if (project.mixinSrg.exists()) {
        addExtraSrgFile project.mixinSrg
    }
}

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').canonicalPath}"
    ]
}

processResources {
    rename "log4j2_prod.xml", "log4j2.xml"

    from minecraftPlugin.delayedFile("{SRG_DIR}/notch-srg.srg")
    rename "notch-srg.srg", "mappings.srg"
}
